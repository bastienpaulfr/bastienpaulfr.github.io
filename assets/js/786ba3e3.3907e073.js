"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[584],{3105:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},assets:function(){return u},toc:function(){return c},default:function(){return m}});var a=t(7462),o=t(3366),i=(t(7294),t(3905)),r=["components"],l={title:"Publish a Kotlin lib with gradle Kotlin DSL",date:new Date("2019-02-08T13:03:53.000Z"),draft:!1},p=void 0,s={permalink:"/blog/publish-kotlin-lib",editUrl:"https://github.com/bastienpaulfr/bastienpaulfr.github.io/edit/master/website/blog/blog/publish-kotlin-lib.md",source:"@site/blog/publish-kotlin-lib.md",title:"Publish a Kotlin lib with gradle Kotlin DSL",description:"I wanted to play more with Kotlin and I wanted to publish KGeoGson lib to a remote maven repo.",date:"2019-02-08T13:03:53.000Z",formattedDate:"February 8, 2019",tags:[],readingTime:3.35,truncated:!1,authors:[],prevItem:{title:"How to create a circlular file logger with Timber",permalink:"/blog/circular-file-logger"},nextItem:{title:"Use Dagger Provider with Android Material Stepper",permalink:"/blog/dagger-material-stepper"}},u={authorsImageUrls:[]},c=[{value:"Bootstrap Kotlin project",id:"bootstrap-kotlin-project",children:[]},{value:"Setup",id:"setup",children:[]}],d={toc:c};function m(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"I wanted to play more with Kotlin and I wanted to publish ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bastienpaulfr/geojson-kotlin"},"KGeoGson")," lib to a remote maven repo."),(0,i.kt)("p",null,"I was following ",(0,i.kt)("a",{parentName:"p",href:"https://guides.gradle.org/building-kotlin-jvm-libraries/"},"gradle guide")," to build my kotlin project with Kotlin DSL."),(0,i.kt)("h2",{id:"bootstrap-kotlin-project"},"Bootstrap Kotlin project"),(0,i.kt)("p",null,"Create project directory with files of your library you want to build and publish. You may have a directory structure like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"project\n\u251c\u2500\u2500 build.gradle.kts\n\u251c\u2500\u2500 settings.gradle.kts\n\u2514\u2500\u2500 my-kotlin-library\n    \u251c\u2500\u2500 build.gradle.kts\n    \u2514\u2500\u2500 src\n        \u251c\u2500\u2500 main\n        \u2502   \u2514\u2500\u2500 kotlin\n        \u2502       \u2514\u2500\u2500 org\n        \u2502           \u2514\u2500\u2500 example\n        \u2502               \u2514\u2500\u2500 MyLibrary.kt\n        \u2514\u2500\u2500 test\n            \u2514\u2500\u2500 kotlin\n                \u2514\u2500\u2500 org\n                    \u2514\u2500\u2500 example\n                        \u2514\u2500\u2500 MyLibraryTest.kt\n")),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("p",null,"Root ",(0,i.kt)("strong",{parentName:"p"},"build.gradle.kts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n   `build-scan`\n}\n\nbuildScan {\n   termsOfServiceUrl = "https://gradle.com/terms-of-service"\n   termsOfServiceAgree = "yes"\n\n   publishAlways()\n}\n\nval clean by tasks.creating(Delete::class) {\n   delete(rootProject.buildDir)\n}\n')),(0,i.kt)("p",null,"In this file, \xab build-scan \xbb plugin is activated and a clean task is added. That\u2019s all for it"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"settings.gradle.kts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'include("lib")\n')),(0,i.kt)("p",null,"In this file, we define our modules"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"lib/build.gradle.kts")),(0,i.kt)("p",null,"First we are adding some plugins"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n   // Add Kotlin plugin to build our Kotlin lib\n   kotlin("jvm") version "1.3.21"\n   // Get version from git tags\n   id("fr.coppernic.versioning") version "3.1.2"\n   // Documentation for our code\n   id("org.jetbrains.dokka") version "0.9.17"\n   // Publication to bintray\n   id("com.jfrog.bintray") version "1.8.4"\n   // Maven publication\n   `maven-publish`\n}\n')),(0,i.kt)("p",null,"Then we are defining dependencies and their repositories for our code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'repositories {\n   jcenter()\n   mavenCentral()\n}\n\ndependencies {\n   implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7")\n   implementation("com.google.code.gson:gson:2.8.5")\n\n   testCompile("junit:junit:4.12")\n}\n')),(0,i.kt)("p",null,"We need some more tasks to add sources and javadoc to our lib. We are starting by configuring dokka task:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'tasks {\n   dokka {\n       outputFormat = "html"\n       outputDirectory = "$buildDir/javadoc"\n       moduleName = rootProject.name\n   }\n}\n')),(0,i.kt)("p",null,"We can then bundle documentation into a jar"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val dokkaJar by tasks.creating(Jar::class) {\n   group = JavaBasePlugin.DOCUMENTATION_GROUP\n   description = "Assembles Kotlin docs with Dokka"\n   archiveClassifier.set("javadoc")\n   from(tasks.dokka)\n   dependsOn(tasks.dokka)\n}\n')),(0,i.kt)("p",null,"We are creating another jar containing sources"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val sourcesJar by tasks.creating(Jar::class) {\n   archiveClassifier.set("sources")\n   from(sourceSets.getByName("main").allSource)\n}\n')),(0,i.kt)("p",null,"At this stage, you are able to compile your lib. The most important part of this article begins. Let\u2019s see how publication is working. It is very important to configure pom.xml file of maven artifact in a right manner. Otherwise you will not be able to submit your library into JCenter repo."),(0,i.kt)("p",null,"Let\u2019s start configuring base of maven publish plugin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val artifactName = "libname"\nval artifactGroup = "org.example"\n\npublishing {\n   publications {\n       create<MavenPublication>("lib") {\n           groupId = artifactGroup\n           artifactId = artifactName\n           // version is gotten from an external plugin\n           version = project.versioning.info.display\n           // This is the main artifact\n           from(components["java"])\n           // We are adding documentation artifact\n           artifact(dokkaJar)\n           // And sources\n           artifact(sourcesJar)\n       }\n   }\n}\n')),(0,i.kt)("p",null,"Now we need to add information about package in ",(0,i.kt)("strong",{parentName:"p"},"pom.xml")," file. You can edit ",(0,i.kt)("strong",{parentName:"p"},"pom.xml")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.withXml {")," code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val pomUrl = "..."\nval pomScmUrl = "..."\nval pomIssueUrl = "..."\nval pomDesc = "..."\nval pomScmConnection = ""..."\nval pomScmDevConnection = "..."\n\nval githubRepo = "..."\nval githubReadme = "..."\n\nval pomLicenseName = "The Apache Software License, Version 2.0"\nval pomLicenseUrl = "http://www.apache.org/licenses/LICENSE-2.0.txt"\nval pomLicenseDist = "repo"\n\nval pomDeveloperId = "..."\nval pomDeveloperName = "..."\n\n\npublishing {\n   publications {\n       create<MavenPublication>("lib") {\n           [...]\n\n           pom.withXml {\n               asNode().apply {\n                   appendNode("description", pomDesc)\n                   appendNode("name", rootProject.name)\n                   appendNode("url", pomUrl)\n                   appendNode("licenses").appendNode("license").apply {\n                       appendNode("name", pomLicenseName)\n                       appendNode("url", pomLicenseUrl)\n                       appendNode("distribution", pomLicenseDist)\n                   }\n                   appendNode("developers").appendNode("developer").apply {\n                       appendNode("id", pomDeveloperId)\n                       appendNode("name", pomDeveloperName)\n                   }\n                   appendNode("scm").apply {\n                       appendNode("url", pomScmUrl)\n                       appendNode("connection", pomScmConnection)\n                   }\n               }\n           }\n       }\n   }\n}\n')),(0,i.kt)("p",null,"Now that your maven publication is well configured, you can configure bintray plugin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'bintray {\n   // Getting bintray user and key from properties file or command line\n   user = if (project.hasProperty("bintray_user")) project.property("bintray_user") as String else ""\n   key = if (project.hasProperty("bintray_key")) project.property("bintray_key") as String else ""\n\n   // Automatic publication enabled\n   publish = true\n\n   // Set maven publication onto bintray plugin\n   setPublications("lib")\n\n   // Configure package\n   pkg.apply {\n       repo = "maven"\n       name = rootProject.name\n       setLicenses("Apache-2.0")\n       setLabels("Gson", "json", "GeoJson", "GPS", "Kotlin")\n       vcsUrl = pomScmUrl\n       websiteUrl = pomUrl\n       issueTrackerUrl = pomIssueUrl\n       githubRepo = githubRepo\n       githubReleaseNotesFile = githubReadme\n\n       // Configure version\n       version.apply {\n           name = project.versioning.info.display\n           desc = pomDesc\n           released = Date().toString()\n           vcsTag = project.versioning.info.tag\n       }\n   }\n}\n')),(0,i.kt)("p",null,"Here we is ! Happy publication !"))}m.isMDXComponent=!0}}]);