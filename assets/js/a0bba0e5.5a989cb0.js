"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[772],{6567:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return u},assets:function(){return c},toc:function(){return p},default:function(){return m}});var i=n(7462),a=n(3366),s=(n(7294),n(3905)),r=["components"],l={title:"Assert Statique",date:new Date("2014-08-04T13:02:57.000Z"),draft:!1},o=void 0,u={permalink:"/blog/static-assert",editUrl:"https://github.com/bastienpaulfr/bastienpaulfr.github.io/edit/master/website/blog/blog/static-assert.md",source:"@site/blog/static-assert.md",title:"Assert Statique",description:"L\u2019utilisation d\u2019un assert statique peut \xeatre utile dans le cas ou une condition doit \xeatre test\xe9e au moment de la compilation. Par exemple la taille d\u2019un tableau. Le principe est d\u2019utiliser une macro pour d\xe9finir une expression. Si le test est valide alors l\u2019expression g\xe9n\xe9r\xe9e l\u2019est aussi, sinon elle r\xe9sulte en une erreur de compilation.",date:"2014-08-04T13:02:57.000Z",formattedDate:"August 4, 2014",tags:[],readingTime:.535,truncated:!1,authors:[],prevItem:{title:"Prot\xe9ger les classes contre la copie ou l\u2019assignation en C++",permalink:"/blog/assignation-protect"},nextItem:{title:"Mutex Locker",permalink:"/blog/mutex-locker"}},c={authorsImageUrls:[]},p=[],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,r);return(0,s.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"L\u2019utilisation d\u2019un assert statique peut \xeatre utile dans le cas ou une condition doit \xeatre test\xe9e au moment de la compilation. Par exemple la taille d\u2019un tableau. Le principe est d\u2019utiliser une macro pour d\xe9finir une expression. Si le test est valide alors l\u2019expression g\xe9n\xe9r\xe9e l\u2019est aussi, sinon elle r\xe9sulte en une erreur de compilation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c++"},"#define STATIC_ASSERT(cond)    typedef int ERROR_##__LINE__[(cond) ? 1 : -1]\n")),(0,s.kt)("p",null,"Ici, on utilise ",(0,s.kt)("inlineCode",{parentName:"p"},"typedef")," pour d\xe9finir un type tableau. Si la condition est valide alors la taille du tableau est positive. Sinon elle est n\xe9gative ce qui r\xe9sulte en une erreur de compilation."),(0,s.kt)("p",null,"Exemple d\u2019utilisation :"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c++"},"STATIC_ASSERT(sizeof(object1) == sizeof(object2));\n")))}m.isMDXComponent=!0}}]);