<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://famillepaul.fr/blog</id>
    <title>echo "Hello World ! " Blog</title>
    <updated>2020-03-30T13:04:26.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://famillepaul.fr/blog"/>
    <subtitle>echo "Hello World ! " Blog</subtitle>
    <icon>https://famillepaul.fr/img/initiales_small.png</icon>
    <entry>
        <title type="html"><![CDATA[Add a new line at the end of each text files tracked by git]]></title>
        <id>Add a new line at the end of each text files tracked by git</id>
        <link href="https://famillepaul.fr/blog/nl-at-eof"/>
        <updated>2020-03-30T13:04:26.000Z</updated>
        <summary type="html"><![CDATA[One of the most anoying thing I meet when I am coding software, is the « No new line at end of file » warning.]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to create a circlular file logger with Timber]]></title>
        <id>How to create a circlular file logger with Timber</id>
        <link href="https://famillepaul.fr/blog/circular-file-logger"/>
        <updated>2019-03-01T13:04:06.000Z</updated>
        <summary type="html"><![CDATA[In some applications, I need to store my logs in a file aside of traditional logcat. For this, I am making use of Timber library. Because I don’t want to make my device full of logs, I wanted to use circular log files so that I can control the maximum amount of bytes taken by log data. To achieve this, I will use java Logger API to implement a new Timber.Tree. I also want some feature like log formatting and filtering.]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Publish a Kotlin lib with gradle Kotlin DSL]]></title>
        <id>Publish a Kotlin lib with gradle Kotlin DSL</id>
        <link href="https://famillepaul.fr/blog/publish-kotlin-lib"/>
        <updated>2019-02-08T13:03:53.000Z</updated>
        <summary type="html"><![CDATA[I wanted to play more with Kotlin and I wanted to publish KGeoGson lib to a remote maven repo.]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Use Dagger Provider with Android Material Stepper]]></title>
        <id>Use Dagger Provider with Android Material Stepper</id>
        <link href="https://famillepaul.fr/blog/dagger-material-stepper"/>
        <updated>2019-01-24T13:03:38.000Z</updated>
        <summary type="html"><![CDATA[On an Android project, I am using android-material-stepper from StepStone. I am also using dependency injection with dagger.]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android : Créer un fichier keystore (jks) à partir d’une clé (.pk8) et d’un certificat (.pem)]]></title>
        <id>Android : Créer un fichier keystore (jks) à partir d’une clé (.pk8) et d’un certificat (.pem)</id>
        <link href="https://famillepaul.fr/blog/from-pk8-to-jks"/>
        <updated>2016-11-14T13:03:19.000Z</updated>
        <summary type="html"><![CDATA[- Extraire la clé contenue dans le fichier pk8 et la mettre en clair dans un fichier pem]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Protéger les classes contre la copie ou l’assignation en C++]]></title>
        <id>Protéger les classes contre la copie ou l’assignation en C++</id>
        <link href="https://famillepaul.fr/blog/assignation-protect"/>
        <updated>2014-08-14T13:02:46.000Z</updated>
        <summary type="html"><![CDATA[Pour protéger les classes contre la copie, il suffit de déclarer le constructeurs de copie en private. Une macro peut être définie car le principe est le même pour toutes les classes.]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Assert Statique]]></title>
        <id>Assert Statique</id>
        <link href="https://famillepaul.fr/blog/static-assert"/>
        <updated>2014-08-04T13:02:57.000Z</updated>
        <summary type="html"><![CDATA[L’utilisation d’un assert statique peut être utile dans le cas ou une condition doit être testée au moment de la compilation. Par exemple la taille d’un tableau. Le principe est d’utiliser une macro pour définir une expression. Si le test est valide alors l’expression générée l’est aussi, sinon elle résulte en une erreur de compilation.]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mutex Locker]]></title>
        <id>Mutex Locker</id>
        <link href="https://famillepaul.fr/blog/mutex-locker"/>
        <updated>2014-08-04T13:02:32.000Z</updated>
        <summary type="html"><![CDATA[Préambule]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Singleton]]></title>
        <id>Singleton</id>
        <link href="https://famillepaul.fr/blog/singleton"/>
        <updated>2014-08-04T13:02:16.000Z</updated>
        <summary type="html"><![CDATA[Présentation]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[The TUN/TAP interface on Linux]]></title>
        <id>The TUN/TAP interface on Linux</id>
        <link href="https://famillepaul.fr/blog/tun-tap"/>
        <updated>2010-12-08T09:27:07.000Z</updated>
        <summary type="html"><![CDATA[Recently, I had to work with the tun interface on Linux. There is not a lot of documentation on this subject so here is a little presentation.]]></summary>
    </entry>
</feed>