<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bastien Paul&#39;s Blog</title>
    <link>http://bastien.famillepaul.fr/</link>
    <description>Recent content on Bastien Paul&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Mar 2020 15:04:26 +0200</lastBuildDate>
    
	<atom:link href="http://bastien.famillepaul.fr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Add a new line at the end of each text files tracked by git</title>
      <link>http://bastien.famillepaul.fr/posts/nl-at-eof/</link>
      <pubDate>Mon, 30 Mar 2020 15:04:26 +0200</pubDate>
      
      <guid>http://bastien.famillepaul.fr/posts/nl-at-eof/</guid>
      <description>Add a new line at the end of each text files tracked by git One of the most anoying thing I meet when I am coding software, is the « No new line at end of file » warning.
For this, I have written a little script based of my research on google. I want to rewrite all text files tracked by git and ensure that a new line is written at the end of file.</description>
    </item>
    
    <item>
      <title>How to create a circlular file logger with Timber</title>
      <link>http://bastien.famillepaul.fr/posts/circular-file-logger/</link>
      <pubDate>Fri, 01 Mar 2019 15:04:06 +0200</pubDate>
      
      <guid>http://bastien.famillepaul.fr/posts/circular-file-logger/</guid>
      <description>How to create a circlular file logger with Timber In some applications, I need to store my logs in a file aside of traditional logcat. For this, I am making use of Timber library. Because I don’t want to make my device full of logs, I wanted to use circular log files so that I can control the maximum amount of bytes taken by log data. To achieve this, I will use java Logger API to implement a new Timber.</description>
    </item>
    
    <item>
      <title>Publish a Kotlin lib with gradle Kotlin DSL</title>
      <link>http://bastien.famillepaul.fr/posts/publish-kotlin-lib/</link>
      <pubDate>Fri, 08 Feb 2019 15:03:53 +0200</pubDate>
      
      <guid>http://bastien.famillepaul.fr/posts/publish-kotlin-lib/</guid>
      <description>Publish a Kotlin lib with gradle Kotlin DSL I wanted to play more with Kotlin and I wanted to publish KGeoGson lib to a remote maven repo.
I was following gradle guide to build my kotlin project with Kotlin DSL.
Bootstrap Kotlin project Create project directory with files of your library you want to build and publish. You may have a directory structure like the following:
project ├── build.gradle.kts ├── settings.</description>
    </item>
    
    <item>
      <title>Use Dagger Provider with Android Material Stepper</title>
      <link>http://bastien.famillepaul.fr/posts/dagger-material-stepper/</link>
      <pubDate>Thu, 24 Jan 2019 15:03:38 +0200</pubDate>
      
      <guid>http://bastien.famillepaul.fr/posts/dagger-material-stepper/</guid>
      <description>Use Dagger Provider with Android Material Stepper On an Android project, I am using android-material-stepper from StepStone. I am also using dependency injection with dagger.
I was facing the following problem : How to properly inject Fragments without the need to create a DaggerComponent for each of them ?
Providers are here to help. This is how I am doing
class StepFragmentBL @Inject constructor() : Fragment(), Step, BlView { @Inject lateinit var blPresenter: BlPresenter .</description>
    </item>
    
    <item>
      <title>Android : Créer un fichier keystore (jks) à partir d’une clé (.pk8) et d’un certificat (.pem)</title>
      <link>http://bastien.famillepaul.fr/posts/from-pk8-to-jks/</link>
      <pubDate>Mon, 14 Nov 2016 15:03:19 +0200</pubDate>
      
      <guid>http://bastien.famillepaul.fr/posts/from-pk8-to-jks/</guid>
      <description># Android : Créer un fichier keystore (jks) à partir d’une clé (.pk8) et d’un certificat (.pem)
 Extraire la clé contenue dans le fichier pk8 et la mettre en clair dans un fichier pem  openssl pkcs8 -inform DER -nocrypt -in key.pk8 -out key.pem  Regrouper la clé et le certificat dans un fichier p12 temporaire  openssl pkcs12 -export -in certificate.pem -inkey key.pem -out platform.p12 -password pass:android -name AndroidDebugKey  Générer le fichier jks à partir du p12 (keytool est un outil du framework android)  keytool -importkeystore -deststorepass android -destkeystore platform.</description>
    </item>
    
    <item>
      <title>Protéger les classes contre la copie ou l’assignation en C&#43;&#43;</title>
      <link>http://bastien.famillepaul.fr/posts/assignation-protect/</link>
      <pubDate>Thu, 14 Aug 2014 15:02:46 +0200</pubDate>
      
      <guid>http://bastien.famillepaul.fr/posts/assignation-protect/</guid>
      <description>Protéger les classes contre la copie ou l’assignation en C++ Pour protéger les classes contre la copie, il suffit de déclarer le constructeurs de copie en private. Une macro peut être définie car le principe est le même pour toutes les classes.
#define DECLARE_NO_COPY_CLASS(classname)  private: classname(const classname&amp;amp;); #endif De même pour les protéger contre l’assignation, on peut déclarer la surcharge de l’opérateur = comme étant private.
#define DECLARE_NO_ASSIGN_CLASS(classname)  private: classname&amp;amp; operator=(const classname&amp;amp;); #endif </description>
    </item>
    
    <item>
      <title>Assert Statique</title>
      <link>http://bastien.famillepaul.fr/posts/static-assert/</link>
      <pubDate>Mon, 04 Aug 2014 15:02:57 +0200</pubDate>
      
      <guid>http://bastien.famillepaul.fr/posts/static-assert/</guid>
      <description>Assert Statique L’utilisation d’un assert statique peut être utile dans le cas ou une condition doit être testée au moment de la compilation. Par exemple la taille d’un tableau. Le principe est d’utiliser une macro pour définir une expression. Si le test est valide alors l’expression générée l’est aussi, sinon elle résulte en une erreur de compilation.
#define STATIC_ASSERT(cond) typedef int ERROR_##__LINE__[(cond) ? 1 : -1] Ici, on utilise typedef pour définir un type tableau.</description>
    </item>
    
    <item>
      <title>Mutex Locker</title>
      <link>http://bastien.famillepaul.fr/posts/mutex-locker/</link>
      <pubDate>Mon, 04 Aug 2014 15:02:32 +0200</pubDate>
      
      <guid>http://bastien.famillepaul.fr/posts/mutex-locker/</guid>
      <description>Mutex Locker Préambule Le mutex locker fait partie du concept de RAII. Cette acronyme vient de l’anglais Resource Acquisition Is Initialization. C’est une technique de programmation qui permet de s’assurer que la ressource acquise sera bien libérée à la fin de la vie d’un objet.
Principe Appliqué au mutex, ce principe consiste à bloquer un mutex lors de la création d’un objet et de le libérer lors de sa destruction. On peut imaginer la création d’un objet spécifique : le MutexLocker.</description>
    </item>
    
    <item>
      <title>Singleton</title>
      <link>http://bastien.famillepaul.fr/posts/singleton/</link>
      <pubDate>Mon, 04 Aug 2014 15:02:16 +0200</pubDate>
      
      <guid>http://bastien.famillepaul.fr/posts/singleton/</guid>
      <description>Singleton Présentation Le singleton est un patron de conception (design pattern) dont le but est de restreindre l’instanciation d’une classe à un nombre défini d’objets. Il est utilisé lorsque l’on a besoin que d’un seul objet pour coordonner des actions dans un système. Par exemple, le singleton va être utilisé comme gestionnaire de fenêtre, gestionnaire de systèmes de fichiers ou d’imprimantes. Le singleton va être disponible de manière globale dans un package et sera utilisé comme étant un point d’accès.</description>
    </item>
    
    <item>
      <title>The TUN/TAP interface on Linux</title>
      <link>http://bastien.famillepaul.fr/posts/tun-tap/</link>
      <pubDate>Wed, 08 Dec 2010 11:27:07 +0200</pubDate>
      
      <guid>http://bastien.famillepaul.fr/posts/tun-tap/</guid>
      <description>The TUN/TAP interface on Linux Recently, I had to work with the tun interface on Linux. There is not a lot of documentation on this subject so here is a little presentation.
TUN/TAP is like a physical Ethernet port but for user space program. Instead of receiving data from a physical device, it receives it from a user space program and instead of sending data through a wire, sends it to a user space program.</description>
    </item>
    
    <item>
      <title>get in touch</title>
      <link>http://bastien.famillepaul.fr/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bastien.famillepaul.fr/contact/</guid>
      <description>  Send  </description>
    </item>
    
  </channel>
</rss>